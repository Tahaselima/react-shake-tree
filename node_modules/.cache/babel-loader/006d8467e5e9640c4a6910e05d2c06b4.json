{"ast":null,"code":"import _toConsumableArray from \"/home/setaxx/Downloads/react-shake-tree-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"/home/setaxx/Downloads/react-shake-tree-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/setaxx/Downloads/react-shake-tree-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/setaxx/Downloads/react-shake-tree-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/setaxx/Downloads/react-shake-tree-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"/home/setaxx/Downloads/react-shake-tree-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"/home/setaxx/Downloads/react-shake-tree-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/setaxx/Downloads/react-shake-tree-master/src/Components/AppleTree/AppleTree.js\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport Apple from \"../Apple/Apple\";\nimport Tree from \"../Tree/Tree\";\nimport _ from 'lodash';\nimport $ from \"jquery\";\nimport { setBasket } from \"../../Utils/locations\";\nimport PropTypes from \"prop-types\";\nimport '../../Style/shake.scss';\n\nvar AppleTree =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(AppleTree, _React$Component);\n\n  function AppleTree(props) {\n    var _this;\n\n    _classCallCheck(this, AppleTree);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(AppleTree).call(this, props));\n    _this.state = {\n      basket: []\n    };\n    _this.startDropping = _this.startDropping.bind(_assertThisInitialized(_this));\n    _this.tree = React.createRef(); // for catch the tree element\n\n    return _this;\n  }\n\n  _createClass(AppleTree, [{\n    key: \"startDropping\",\n    value: function startDropping() {\n      // All apples will drop in different times\n      var _this$props = this.props,\n          basket = _this$props.basket,\n          apples = _this$props.apples;\n      var length = apples.length * Math.random() + 1; //number of apples that will fall\n\n      length = length > apples.length ? apples.length : length;\n\n      var _loop = function _loop(i) {\n        var time = Math.random() * length / 2 * 1000;\n        var apple = $('.Tree .apple:eq(' + i + ')'); // drop apple to ground\n\n        apple.animate({\n          top: '100%' //apples on the floor\n\n        }, time, function () {\n          setTimeout(function () {\n            apple.remove();\n            basket.push(i); //apple on the basket\n\n            setBasket(_toConsumableArray(basket)); //set basket state\n          }, 1000);\n        });\n      };\n\n      for (var i = 0; i < length; i++) {\n        _loop(i);\n      }\n    }\n  }, {\n    key: \"shakeTree\",\n    value: function shakeTree() {\n      var _this2 = this;\n\n      if (this.tree.current.className === 'content jiggle') return; // shake chosen element for 3 sec, rot\n\n      this.tree.current.classList.add('jiggle'); // after 3 sec, we will stop shake\n\n      setTimeout(function () {\n        _this2.tree.current.classList.remove('jiggle'); // start dropping\n\n\n        _this2.startDropping();\n      }, 3000);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var apples = this.props.apples;\n      return React.createElement(\"div\", {\n        className: 'content',\n        onClick: this.shakeTree.bind(this),\n        ref: this.tree,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 68\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"Tree\",\n        ref: this.apples,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 69\n        },\n        __self: this\n      }, _.map(apples, function (n, index) {\n        return React.createElement(Apple, {\n          key: index,\n          style: n,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 72\n          },\n          __self: this\n        });\n      })), React.createElement(Tree, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 77\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return AppleTree;\n}(React.Component);\n\nAppleTree.propTypes = {\n  apples: PropTypes.array.isRequired\n};\n\nvar mapStateToProps = function mapStateToProps(state, ownProps) {\n  return {\n    basket: state.basket.basket\n  };\n};\n\nAppleTree = connect(mapStateToProps)(AppleTree);\nexport default AppleTree;","map":{"version":3,"sources":["/home/setaxx/Downloads/react-shake-tree-master/src/Components/AppleTree/AppleTree.js"],"names":["React","connect","Apple","Tree","_","$","setBasket","PropTypes","AppleTree","props","state","basket","startDropping","bind","tree","createRef","apples","length","Math","random","i","time","apple","animate","top","setTimeout","remove","push","current","className","classList","add","shakeTree","map","n","index","Component","propTypes","array","isRequired","mapStateToProps","ownProps"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport {connect} from 'react-redux';\r\nimport Apple from \"../Apple/Apple\";\r\nimport Tree from \"../Tree/Tree\";\r\nimport _ from 'lodash';\r\nimport $ from \"jquery\";\r\nimport {setBasket} from \"../../Utils/locations\";\r\nimport PropTypes from \"prop-types\";\r\nimport '../../Style/shake.scss';\r\n\r\nclass AppleTree extends React.Component {\r\n\r\n    state = {\r\n        basket: []\r\n    };\r\n\r\n    static propTypes = {\r\n        apples: PropTypes.array.isRequired\r\n    };\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.startDropping = this.startDropping.bind(this);\r\n        this.tree = React.createRef(); // for catch the tree element\r\n    }\r\n\r\n    startDropping() {\r\n        // All apples will drop in different times\r\n        const {basket, apples} = this.props;\r\n        let length = apples.length * Math.random() + 1;  //number of apples that will fall\r\n        length = length > apples.length ? (apples.length) : (length); \r\n        for (let i = 0; i < length; i++) {\r\n            let time = ((Math.random() * length) / 2) * 1000;\r\n            let apple = $('.Tree .apple:eq(' + i + ')');\r\n            // drop apple to ground\r\n            apple.animate({\r\n                top: '100%'  //apples on the floor\r\n            }, time, () => {\r\n                setTimeout(() => {\r\n                    apple.remove(); \r\n                    basket.push(i); //apple on the basket\r\n                    setBasket([...basket]); //set basket state\r\n                }, 1000);\r\n            });\r\n\r\n        }\r\n\r\n    }\r\n\r\n\r\n    shakeTree() {\r\n        if(this.tree.current.className === 'content jiggle')\r\n            return;\r\n        // shake chosen element for 3 sec, rot\r\n        this.tree.current.classList.add('jiggle');\r\n        // after 3 sec, we will stop shake\r\n        setTimeout(() => {\r\n            this.tree.current.classList.remove('jiggle');\r\n            // start dropping\r\n            this.startDropping();\r\n        }, 3000);\r\n    }\r\n\r\n\r\n    render() {\r\n        const {apples} = this.props;\r\n        return (\r\n            <div className={'content'} onClick={this.shakeTree.bind(this)} ref={this.tree}> \r\n                <div className=\"Tree\" ref={this.apples}>\r\n                    {\r\n                        _.map(apples, (n, index) => {\r\n                                return <Apple key={index} style={n}/>\r\n                            }\r\n                        )\r\n                    }\r\n                </div>\r\n                <Tree />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state, ownProps) => ({\r\n    basket: state.basket.basket\r\n});\r\n\r\nAppleTree = connect(mapStateToProps)(AppleTree);\r\n\r\nexport default AppleTree;"]},"metadata":{},"sourceType":"module"}